# Generated by Django 4.1.4 on 2023-01-18 16:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField()),
                ('name', models.TextField()),
                ('type', models.TextField()),
                ('created_at', models.DateTimeField(primary_key=True, serialize=False)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('profile_id', models.UUIDField()),
                ('props', models.JSONField(blank=True, null=True)),
                ('ip_addr', models.GenericIPAddressField(blank=True, null=True)),
                ('tracked_at', models.DateTimeField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
                ('context', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'audit_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('content', models.TextField()),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'db_table': 'comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommentThread',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('page_id', models.UUIDField()),
                ('participants', models.JSONField()),
                ('seqn', models.IntegerField()),
                ('position', models.TextField()),
                ('is_resolved', models.BooleanField()),
                ('page_name', models.TextField(blank=True, null=True)),
                ('frame_id', models.UUIDField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Comment Thread',
                'verbose_name_plural': 'Comment Threads',
                'db_table': 'comment_thread',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('is_shared', models.BooleanField()),
                ('has_media_trimmed', models.BooleanField(blank=True, null=True)),
                ('revn', models.BigIntegerField()),
                ('data', models.BinaryField(blank=True, null=True)),
                ('ignore_sync_until', models.DateTimeField(blank=True, null=True)),
                ('comment_thread_seqn', models.IntegerField(blank=True, null=True)),
                ('data_backend', models.TextField(blank=True, null=True)),
                ('features', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'file',
                'verbose_name_plural': 'files',
                'db_table': 'file',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FileChange',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('session_id', models.UUIDField(blank=True, null=True)),
                ('revn', models.BigIntegerField()),
                ('data', models.BinaryField(blank=True, null=True)),
                ('changes', models.BinaryField(blank=True, null=True)),
                ('features', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'File Change',
                'verbose_name_plural': 'File Changes',
                'db_table': 'file_change',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FileMediaObject',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('mtype', models.TextField()),
                ('is_local', models.BooleanField()),
            ],
            options={
                'verbose_name': 'File Media Object',
                'verbose_name_plural': 'File Media Objects',
                'db_table': 'file_media_object',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HttpSession',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'http_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('fullname', models.TextField()),
                ('email', models.TextField(unique=True)),
                ('password', models.TextField()),
                ('lang', models.TextField(blank=True, null=True)),
                ('theme', models.TextField(blank=True, null=True)),
                ('is_demo', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('props', models.JSONField(blank=True, null=True)),
                ('is_muted', models.BooleanField(blank=True, null=True)),
                ('auth_backend', models.TextField(blank=True, null=True)),
                ('is_blocked', models.BooleanField(blank=True, null=True)),
                ('is_admin', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
                'db_table': 'profile',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_default', models.BooleanField()),
                ('name', models.TextField()),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'project',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectProfileRel',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('is_owner', models.BooleanField(blank=True, null=True)),
                ('is_admin', models.BooleanField(blank=True, null=True)),
                ('can_edit', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Project Member',
                'verbose_name_plural': 'Project Members',
                'db_table': 'project_profile_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ShareLink',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('pages', models.TextField(blank=True, null=True)),
                ('flags', models.TextField(blank=True, null=True)),
                ('who_comment', models.TextField()),
                ('who_inspect', models.TextField()),
            ],
            options={
                'verbose_name': 'Share Link',
                'verbose_name_plural': 'Share Links',
                'db_table': 'share_link',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StorageObject',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('size', models.BigIntegerField()),
                ('backend', models.TextField()),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('touched_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Storage Object',
                'verbose_name_plural': 'Storage Objects',
                'db_table': 'storage_object',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_at', models.DateTimeField()),
                ('priority', models.SmallIntegerField(blank=True, null=True)),
                ('queue', models.TextField()),
                ('name', models.TextField()),
                ('props', models.JSONField()),
                ('error', models.TextField(blank=True, null=True)),
                ('retry_num', models.SmallIntegerField()),
                ('max_retries', models.SmallIntegerField()),
                ('status', models.TextField()),
                ('label', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'db_table': 'task',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('is_default', models.BooleanField()),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'db_table': 'team',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TeamFontVariant',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('font_id', models.UUIDField()),
                ('font_family', models.TextField()),
                ('font_weight', models.SmallIntegerField()),
                ('font_style', models.TextField()),
            ],
            options={
                'verbose_name': 'Team Font Variant',
                'verbose_name_plural': 'Team Font Variants',
                'db_table': 'team_font_variant',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TeamInvitation',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('email_to', models.TextField()),
                ('role', models.TextField()),
                ('valid_until', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'Team Invitation',
                'verbose_name_plural': 'Team Invitations',
                'db_table': 'team_invitation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TeamProfileRel',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('is_admin', models.BooleanField(blank=True, null=True)),
                ('is_owner', models.BooleanField(blank=True, null=True)),
                ('can_edit', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Team Member',
                'verbose_name_plural': 'Team Members',
                'db_table': 'team_profile_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TeamProjectProfileRel',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('modified_at', models.DateTimeField()),
                ('is_pinned', models.BooleanField()),
            ],
            options={
                'verbose_name': 'Teams && Projects & Profiles',
                'db_table': 'team_project_profile_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Webhook',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('uri', models.TextField()),
                ('mtype', models.TextField()),
                ('error_code', models.TextField(blank=True, null=True)),
                ('error_count', models.SmallIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(blank=True, null=True)),
                ('secret_key', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Webhook',
                'verbose_name_plural': 'Webhooks',
                'db_table': 'webhook',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WebhookDelivery',
            fields=[
                ('webhook', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='penpot.webhook')),
                ('created_at', models.DateTimeField()),
                ('error_code', models.TextField(blank=True, null=True)),
                ('req_data', models.JSONField(blank=True, null=True)),
                ('rsp_data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Webhook Delivery',
                'verbose_name_plural': 'Webhook Deliveries',
                'db_table': 'webhook_delivery',
                'managed': False,
            },
        ),
    ]
